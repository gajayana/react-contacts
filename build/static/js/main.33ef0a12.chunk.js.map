{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Contact","_ref","str","item","profileImageStyle","backgroundImage","photo","indexOf","replace","react_default","a","createElement","className","style","firstName","lastName","ContactsList","_ref2","persons","items","map","App_Contact","key","id","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contacts","url","handleCreate","bind","assertThisInitialized","App_ContactsList","onClick","_this2","fetch","then","res","json","result","setState","data","catch","error","console","log","toConsumableArray","concat","age","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAcA,IAAMA,EAAU,SAAAC,GAAY,IARPC,EAQHC,EAAUF,EAAVE,KACZC,EAAoB,CACtBC,gBAAkB,SAVDH,EAUuBC,EAAKG,MATZ,IAA3BJ,EAAIK,QAAQ,YAAgD,IAA5BL,EAAIK,QAAQ,YAE1CL,EAAIM,QAAQ,UAAW,YAEvB,8EAK8C,MAGxD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAOT,IAC3CK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeT,EAAKW,UAAnC,IAA+CX,EAAKY,UACpDN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,2BAMFK,EAAe,SAAAC,GAAa,IAC1BC,EAD0BD,EAAXE,MACCC,IAAI,SAACjB,GACzB,OAAQM,EAAAC,EAAAC,cAACU,EAAD,CAASlB,KAAMA,EAAMmB,IAAKnB,EAAKoB,OAEzC,OAAQd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAkBM,IAmD5BM,cA/Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,IAGZR,EAAKS,IAAM,gFAGXT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATHA,wEAajB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAcpB,MAAQU,KAAKI,MAAMC,WACjCzB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQ6B,QAASX,KAAKO,cAAtB,wDAKS,IAAAK,EAAAZ,KAElBa,MAAMb,KAAKM,IAAM,YACdQ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLL,EAAKM,SAAS,CAACb,SAAWY,EAAOE,SAElCC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,4CAO9BrB,KAAKkB,SAAS,CACZb,SAASP,OAAA0B,EAAA,EAAA1B,CAAKE,KAAKI,MAAMC,UAAjBoB,OAAA,CAA2B,CACjC/B,GAAM,uCACNT,UAAa,QACbC,SAAY,UACZwC,IAAO,IACPjD,MAAS,uHA1CCkD,aC1BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.33ef0a12.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n\n\nfunction handleImage(str) {\n  return (str.indexOf('http://') === 0 || str.indexOf('https://') === 0) \n            ? \n            str.replace('http://', 'https://') \n            : \n            'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg';\n}\n\nconst Contact = ({item}) => {\n  let profileImageStyle = {\n    backgroundImage : 'url(\"' + handleImage(item.photo) + '\")'\n  };\n\n  return(\n    <div className=\"App--profile-box\">\n      <div className=\"App--profile-image\" style={profileImageStyle}></div>\n      <div className=\"text-center\">{item.firstName} {item.lastName}</div>\n      <div>\n        <button>Update</button>\n        <button>Remove</button>\n      </div>\n    </div>\n  );\n};\n\nconst ContactsList = ({items}) => {\n  const persons = items.map((item) => {\n    return (<Contact item={item} key={item.id} />);\n  });\n  return (<div className=\"App--profiles\">{ persons }</div>);\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n    }\n    // No 'Access-Control-Allow-Origin' header is present.\n    this.url = 'https://cors-anywhere.herokuapp.com/https://simple-contact-crud.herokuapp.com';\n    // this.url = 'https://simple-contact-crud.herokuapp.com';\n\n    this.handleCreate = this.handleCreate.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ContactsList items={ this.state.contacts } />\n        <div><button onClick={this.handleCreate}>Create</button></div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    \n    fetch(this.url + '/contact')\n      .then(res => res.json())\n      .then((result) => {\n        this.setState({contacts : result.data})\n      })\n      .catch(error => console.log(error))\n  }\n\n  handleCreate() {\n    // this.setState({\n    //   arrayvar: [...this.state.arrayvar, newelement]\n    // })\n    this.setState({\n      contacts: [...this.state.contacts, {\n        \"id\": \"93ad6070-c92b-11e8-b02f-cbfa15db428c\",\n        \"firstName\": \"Bilbo\",\n        \"lastName\": \"Baggins\",\n        \"age\": 111,\n        \"photo\": \"http://vignette1.wikia.nocookie.net/lotr/images/6/68/Bilbo_baggins.jpg/revision/latest?cb=20130202022550\"\n      }]\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}